---

- name: fetch secrets
  hosts: ofn_servers
  remote_user: "{{ user }}"

  tasks:
    - name: update local secrets files
      include_role:
        name: fetch_secrets
        apply:
          delegate_to: 127.0.0.1
      when: ( fetch_ofn_secrets is defined or lookup('env','FETCH_OFN_SECRETS') == 'TRUE' ) and inventory_hostname not in groups['local']
      run_once: true

- name: provision
  hosts: ofn_servers
  remote_user: "{{ user }}"
  roles:
    - role: ssh_keys # Add sysadmin ssh keys to server
      become: yes
      tags: ssh_keys

    - role: geerlingguy.security
      become: yes
      become_user: root
      tags: security

    - role: oefenweb.swapfile
      become: yes
      tags: swapfile

    - role: compatibility # Handle version-specific OS dependencies and configuration
      tags: compatibility

    - role: language # Setup locale.
      tags: language

- name: webservers
  hosts: ofn_webservers
  strategy: free
  remote_user: "{{ user }}"

  pre_tasks:
    - include_role:
        name: check_secrets

  handlers:
    - include: ../roles/shared_handlers/handlers/main.yml

  roles:
    - role: unicorn_user # Create unprivileged user to run unicorn
      tags: unicorn_user

    - role: common # Install common apps and libraries, and setup shell.
      tags: common

    - role: zzet.rbenv # Install ruby. If missing run: ansible-galaxy install zzet.rbenv
      rbenv:
        env: user
        version: v1.0.0
        default_ruby: "{{ ruby_version }}"
        rubies: "{{ ruby_versions }}"

      rbenv_users:
        - "{{ unicorn_user }}"
      tags: ruby

    - role: app # Build the app directory structure and support files.
      become: yes
      become_user: "{{ unicorn_user }}"
      tags: app

    - role: yarn
      become: yes
      tags: yarn

    - role: libre_ops.multi_redis
      vars:
        multiredis_disable_default_instance: false
      become: yes
      become_user: root
      tags: redis
      when: inventory_hostname != 'local_travis'

    - role: sidekiq
      tags: sidekiq

    - role: coopdevs.certbot_nginx
      become: yes
      vars:
        domain_name: "{{ certbot_domains | default([domain]) | join(',') }}"
        letsencrypt_email: "{{ developer_email }}"
        certbot_nginx_cert_name: "{{ certbot_cert_name | default(domain) }}"
        certbot_version: "0.31.0-2~deb10u1+ubuntu{{ ansible_distribution_version }}.1+certbot+3"
      when: inventory_hostname not in groups['local']
      tags: certbot

    - role: brotli_nginx
      tags: brotli

    - role: jdauphant.nginx
      become: yes
      tags: nginx

    - role: webserver # Build the unicorn webserver.
      tags: webserver

    - role: datadog
      become: yes
      tags: datadog

    - role: arillso.logrotate
      become: yes
      tags: logrotate

    - role: arillso.logrotate
      become: yes
      tags: logrotate
  tasks:
    - meta: flush_handlers # Ensure handlers run successfully before reporting success

    - name: notify slack
      slack:
        token: "T02G54U79/BF25P9F7A/DJdtYaLLUpRJPiu72d8NqgGg"
        msg: '{{ inventory_hostname }} provisioned'
        channel: "#devops-notifications"
        username: "ansible executed by {{ lookup('env','USER') }}"
      when: inventory_hostname not in groups['local']

    - name: notify datadog
      uri:
        url: "https://api.datadoghq.com/api/v1/events?api_key={{ datadog_key }}"
        method: POST
        body:
          title: "Provisioned"
          text: "Provisioned host: {{ inventory_hostname }} ({{ host_id | default(ansible_limit) }})"
          host: "{{ inventory_hostname }}"
          tags:
            - "provisioned"
        body_format: json
        status_code: 202
        headers:
          Content-Type: "application/json"
      when: datadog_key is defined and inventory_hostname not in groups['local']

- name: dbservers
  hosts: ofn_dbservers
  strategy: free
  remote_user: "{{ user }}"

  pre_tasks:
    - include_role:
        name: check_secrets

  handlers:
    - include: ../roles/shared_handlers/handlers/main.yml

  roles:
    - role: dbserver # Set up database server and user for the app.
      become: yes
      become_user: root
      tags: dbserver
      db_user_roles: CREATEDB,REPLICATION

    - role: datadog
      become: yes
      tags: datadog

    - role: arillso.logrotate
      become: yes
      tags: logrotate

  tasks:
    - meta: flush_handlers # Ensure handlers run successfully before reporting success

    - name: notify slack
      slack:
        token: "T02G54U79/BF25P9F7A/DJdtYaLLUpRJPiu72d8NqgGg"
        msg: '{{ inventory_hostname }} provisioned'
        channel: "#devops-notifications"
        username: "ansible executed by {{ lookup('env','USER') }}"
      when: inventory_hostname not in groups['local']

    - name: notify datadog
      uri:
        url: "https://api.datadoghq.com/api/v1/events?api_key={{ datadog_key }}"
        method: POST
        body:
          title: "Provisioned"
          text: "Provisioned host: {{ inventory_hostname }} ({{ host_id | default(ansible_limit) }})"
          host: "{{ inventory_hostname }}"
          tags:
            - "provisioned"
        body_format: json
        status_code: 202
        headers:
          Content-Type: "application/json"
      when: datadog_key is defined and inventory_hostname not in groups['local']

- name: dbservers
  hosts: ofn_dbservers
  strategy: free
  remote_user: "{{ user }}"

  pre_tasks:
    - include_role:
        name: check_secrets

  handlers:
    - include: ../roles/shared_handlers/handlers/main.yml

  roles:
    - role: dbserver # Set up database server and user for the app.
      become: yes
      become_user: root
      tags: dbserver
      db_user_roles: CREATEDB,REPLICATION

    - role: datadog
      become: yes
      tags: datadog

    - role: arillso.logrotate
      become: yes
      tags: logrotate

  tasks:
    - meta: flush_handlers # Ensure handlers run successfully before reporting success

    - name: notify slack
      slack:
        token: "T02G54U79/BF25P9F7A/DJdtYaLLUpRJPiu72d8NqgGg"
        msg: '{{ inventory_hostname }} provisioned'
        channel: "#devops-notifications"
        username: "ansible executed by {{ lookup('env','USER') }}"
      when: inventory_hostname not in groups['local']

    - name: notify datadog
      uri:
        url: "https://api.datadoghq.com/api/v1/events?api_key={{ datadog_key }}"
        method: POST
        body:
          title: "Provisioned"
          text: "Provisioned host: {{ inventory_hostname }} ({{ host_id | default(ansible_limit) }})"
          host: "{{ inventory_hostname }}"
          tags:
            - "provisioned"
        body_format: json
        status_code: 202
        headers:
          Content-Type: "application/json"
      when: datadog_key is defined and inventory_hostname not in groups['local']
