---

# User name and password for running ansible on host
user: ofn-admin

# User name for deployment
deployment_user: ofn-deploy

# Connecting to the server
#   ssh_pubkey - Location of the SSH public key file for the user created by
#   running "ansible user.yml -f 10"  The location given is the path on your
#   local machine.  Ex: "{{ lookup('file', '~/.ssh/ofn_rsa.pub') }}"
# The Ansible scripts will put it up onto the proper location on the OFN server.
# This might be used by hosts (like DigitalOcean) that require or encourage you
# to connect using SSH instead of just passwords.
ssh_pubkey: "{{ lookup('file', '~/.ssh/{{ ssh_pubkey_name }}') }}"

# You can paste the repo/branch straight from a github PR here, like: "Contributor22:new_feature"
github_key: openfoodfoundation:master

git_repo: "https://github.com/{{ github_key.split(':')[0] }}/openfoodnetwork.git"
git_version: "{{ github_key.split(':')[1] }}"

l10n_git_version: HEAD


#----------------------------------------------------------------------
# Default values (should be overridden in each server config)
rails_env: staging
host_id: ofn-staging
admin_email: "admin@{{ domain }}"


#----------------------------------------------------------------------
# security role variables
security_autoupdate_mail_to: "{{ developer_email }}"
security_autoupdate_blacklist:
  - nginx
  - nginx-common

#----------------------------------------------------------------------
# Database backup variables
default_backup_filename: backup
local_backup_path: "../backups/{{ default_backup_filename }}.sql.gz"
remote_backup_dir: "/var/lib/postgresql"
remote_backup_path: "{{ remote_backup_dir }}/{{ default_backup_filename }}.sql.gz"

#----------------------------------------------------------------------
# swapfile variables
swapfile_size: false

#----------------------------------------------------------------------
# Rails variables
ruby_version: 2.3.7

ruby_versions:
  - version: 2.3.7

env:
  RAILS_ENV: "{{ rails_env }}"
  PATH: "{{ gem_home }}/bin:{{ ansible_env.PATH }}"

#----------------------------------------------------------------------
# Database variables
db: openfoodnetwork
test_db: ofn_test
db_user: ofn_user
db_host: localhost
postgres_encoding: en_US.utf8

#----------------------------------------------------------------------
# Postgresql variables

# These include the default values for postgres, and some empty (extendable) values.
# Entries marked custom_* can be defined in /host_vars files, and will be appended
# to the defaults if present. Make sure you use the "list" notation with the dashes!

default_hba_entries:
  - {type: local, database: replication, user: ofn_data, auth_method: md5}
  - {type: host, database: replication, user: ofn_data, address: '127.0.0.1/32', auth_method: md5}
  - {type: local, database: all, user: postgres, auth_method: peer}
  - {type: local, database: all, user: all, auth_method: peer}
  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5}
  - {type: host, database: all, user: all, address: '::1/128', auth_method: md5}

custom_hba_entries: []

postgresql_hba_entries: "{{ default_hba_entries + custom_hba_entries }}"

postgres_listen_addresses:
  - localhost

postgres_shared_preload_libraries:
  - pg_stat_statements
  - wal2json

postgresql_global_config_options:
  - option: listen_addresses
    value: "{{ postgres_listen_addresses | join(',') }}"
  - option: shared_preload_libraries
    value: "{{ postgres_shared_preload_libraries | join(',') }}"
  - option: include_dir
    value: "conf.d"

debezium_version: "0.10.0.Final"

#----------------------------------------------------------------------
# App variables
app: openfoodnetwork
# Paths
unicorn_home_path: "/home/{{ unicorn_user }}"
gem_path: "{{ unicorn_home_path }}/.gem"
bundle_path: "{{ unicorn_home_path }}/.rbenv/shims/bundle"
app_path: "{{ unicorn_home_path }}/apps/{{ app }}"
current_path: "{{ app_path }}/current"
repo_path: "{{ app_path }}/repo"
build_path: "{{ app_path }}/build"
shared_path: "{{ app_path }}/shared"
backup_path: "{{ app_path }}/backups"
releases_path: "{{ app_path }}/releases-old"
rollback_path: "{{ app_path }}/rollback"
rollback_sql_path: "{{ app_path }}/rollback.sql.gz"
assets_path: "{{ shared_path }}/assets"
system_path: "{{ shared_path }}/system"
images_path: "{{ shared_path }}/images"
spree_path: "{{ shared_path }}/spree"
config_path: "{{ shared_path }}/config"
log_path: "{{ shared_path }}/log"
pid_path: "{{ shared_path }}/pids"
sock_path: "{{ shared_path }}/sock"
l10n_path: "{{ shared_path }}/l10n"


#----------------------------------------------------------------------
# Logrotate options

logrotate_applications:
  - name: rails
    definitions:
      - logs:
          - "{{ current_path }}/log/*.log"
        options:
          - weekly        # rotate weekly
          - rotate 4      # delete logs older than 4 rotations
          - compress      # compress rotated logs
          - missingok     # ignore missing logs
          - notifempty    # don't rotate if empty
          - copytruncate  # copy the log, then empty the active logfile

  - name: unicorn
    definitions:
      - logs:
          - "{{ shared_path }}/log/unicorn.log"
        options:
          - weekly        # rotate weekly
          - rotate 4      # delete logs older than 4 rotations
          - compress      # compress rotated logs
          - missingok     # ignore missing logs
          - notifempty    # don't rotate if empty
          - copytruncate  # copy the log, then empty the active logfile

  - name: postgres_queries
    definitions:
      - logs:
          - "/var/log/pg_log/*.log"
        options:
          - daily         # run daily
          - rotate 0      # don't rotate files
          - nocreate      # don't replace log files
        lastaction:       # delete log files older than 1 day
          - "find /var/log/pg_log/ -name '*.log' -mtime +1 -exec rm {};"

#----------------------------------------------------------------------
# Unicorn variables
# User name for the unprivileged user which runs unicorn
unicorn_user: openfoodnetwork
unicorn_config: "{{ config_path }}/unicorn.rb"
unicorn_log: "{{ log_path }}/unicorn.log"
unicorn_pid: "{{ pid_path }}/unicorn.pid"
unicorn_sock: "{{ sock_path }}/unicorn.{{ app }}.sock"
unicorn_workers: 2
unicorn_timeout: 30
unicorn_env_vars: |
  KILL_UNICORNS=true

#----------------------------------------------------------------------
# Memcached variables
memcached_value_max_megabytes: 4

#----------------------------------------------------------------------
# Core devs: users named here will have SSH access on all instances

core_devs:
  - maikel
  - pau
  - enricostn
  - luis
  - matt
  - kristina

#----------------------------------------------------------------------
# nginx config

app_root: "{{ current_path }}"

nginx_official_repo: True

nginx_extra_root_params:
  - load_module modules/ngx_http_brotli_filter_module.so
  - load_module modules/ngx_http_brotli_static_module.so

nginx_http_params:
  - sendfile "on"
  - tcp_nopush "on"
  - tcp_nodelay "on"
  - keepalive_timeout "65"
  - log_format nginx '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent $request_time ' '"$http_referer" "$http_user_agent"'
  - access_log "{{nginx_log_dir}}/access.log" nginx
  - "error_log {{nginx_log_dir}}/error.log error"
  - server_tokens off
  - types_hash_max_size 2048

nginx_acme_challenge_config: |+
  location '/.well-known/acme-challenge' {
    default_type "text/plain";
    root /etc/letsencrypt/webrootauth;
  }

nginx_sites:
  default:
    - |
      listen 80 default_server;
      listen [::]:80 default_server;
      server_name  _;
      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;
      add_header X-Frame-Options DENY always;
      add_header Content-Security-Policy "default-src none" always;
      location / {
        access_log off;
        return 444;
      }

  ofn_80:
    - |
      listen 80;
      listen [::]:80;
      server_name {{ certbot_domains | default([domain]) | join(' ') }};

      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;

      {{ nginx_acme_challenge_config }}

      location / {
        return 301 https://$host$request_uri;
      }

  ofn_443:
    - |
      listen 443 ssl http2;
      listen [::]:443 ssl http2;
      server_name {{ certbot_domains | default([domain]) | join(' ') }};
      root {{ app_root }}/public;

      ssl_certificate      /etc/letsencrypt/live/{{ certbot_cert_name | default(domain) }}/fullchain.pem;
      ssl_certificate_key  /etc/letsencrypt/live/{{ certbot_cert_name | default(domain) }}/privkey.pem;

      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;

      gzip on;
      gzip_types text/css text/javascript text/plain application/javascript application/x-javascript application/json;
      gzip_disable "msie6";

      brotli on;
      brotli_types text/css text/javascript text/plain application/javascript application/x-javascript application/json;

      try_files $uri/index.html $uri @unicorn;
      location @unicorn {
        if (-f /etc/nginx/maintenance.html) {
          return 503;
        }

        gzip_proxied no-cache no-store private expired auth;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_pass http://unicorn;
      }

      location ~ ^/(assets)/ {
        gzip_static on;
        brotli_static on;
        expires max;
        add_header Cache-Control public;
      }

      error_page 500 502 504 /500.html;
      error_page 503 @maintenance;

      location @maintenance {
        root /etc/nginx;
        try_files /maintenance.html =503;
      }

      client_max_body_size 4G;
      keepalive_timeout {{ unicorn_timeout }};
      proxy_read_timeout {{ unicorn_timeout }};
      proxy_send_timeout {{ unicorn_timeout }};

      include /etc/nginx/sites-available/ofn/*;

nginx_events_params:
  - worker_connections 768

nginx_configs:
  upstream:
    - upstream unicorn { server unix:{{ unicorn_sock }} fail_timeout=0; }

# Use python2.7 interpeter
ansible_python_interpreter: '/usr/bin/python2.7'
