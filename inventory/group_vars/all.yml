---

# User name and password for running ansible on host
user: ofn-admin

# Connecting to the server
#   ssh_pubkey - Location of the SSH public key file for the user created by
#   running "ansible user.yml -f 10"  The location given is the path on your
#   local machine.  Ex: "{{ lookup('file', '~/.ssh/ofn_rsa.pub') }}"
# The Ansible scripts will put it up onto the proper location on the OFN server.
# This might be used by hosts (like DigitalOcean) that require or encourage you
# to connect using SSH instead of just passwords.
ssh_pubkey: "{{ lookup('file', '~/.ssh/{{ ssh_pubkey_name }}') }}"

protocol: https

git_repo: https://github.com/openfoodfoundation/openfoodnetwork.git
git_version:  v1.10.1

l10n_git_version: HEAD


#----------------------------------------------------------------------
# Default values (should be overridden in each server config)
rails_env: staging
admin_email: "hello@{{ domain }}"


#----------------------------------------------------------------------
# security role variables
security_autoupdate_mail_to: "{{ developer_email }}"


#----------------------------------------------------------------------
# Rails variables
ruby_version: 2.1.5
env:
  RAILS_ENV: "{{ rails_env }}"
  PATH: "{{ gem_home }}/bin:{{ ansible_env.PATH }}"
#phantomjs: phantomjs-1.9.0-linux-x86_64


#----------------------------------------------------------------------
# Database variables
db: openfoodnetwork
test_db: ofn_test
db_user: ofn_user
db_host: localhost


#----------------------------------------------------------------------
# App variables
app: openfoodnetwork
# Paths
unicorn_home_path: "/home/{{ unicorn_user }}"
gem_path: "{{ unicorn_home_path }}/.gem"
bundle_path: "{{ unicorn_home_path }}/.rbenv/shims/bundle"
app_path: "{{ unicorn_home_path }}/apps/{{ app }}"
current_path: "{{ app_path }}/current"
repo_path: "{{ app_path }}/repo"
build_path: "{{ app_path }}/build"
shared_path: "{{ app_path }}/shared"
backup_path: "{{ app_path }}/backups"
releases_path: "{{ app_path }}/releases-old"
rollback_path: "{{ app_path }}/rollback"
rollback_sql_path: "{{ app_path }}/rollback.sql.gz"
assets_path: "{{ shared_path }}/assets"
system_path: "{{ shared_path }}/system"
images_path: "{{ shared_path }}/images"
spree_path: "{{ shared_path }}/spree"
config_path: "{{ shared_path }}/config"
log_path: "{{ shared_path }}/log"
pid_path: "{{ shared_path }}/pids"
sock_path: "{{ shared_path }}/sock"
l10n_path: "{{ shared_path }}/l10n"
git_post_receive: "{{ current_path }}/.git/hooks/post-receive"


#----------------------------------------------------------------------
# Unicorn variables
# User name for the unprivileged user which runs unicorn
unicorn_user: openfoodnetwork
unicorn_config: "{{ config_path }}/unicorn.rb"
unicorn_log: "{{ log_path }}/unicorn.log"
unicorn_pid: "{{ pid_path }}/unicorn.pid"
unicorn_sock: "{{ sock_path }}/unicorn.{{ app }}.sock"
unicorn_workers: 2
unicorn_timeout: 30



#----------------------------------------------------------------------
# nginx config

nginx_official_repo: True

nginx_sites:
  default:
    - |
      listen 80 default_server;
      listen [::]:80 default_server;
      server_name  _;
      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;
      add_header X-Frame-Options DENY always;
      add_header Content-Security-Policy "default-src none" always;
      location / {
        access_log off;
        return 444;
      }

  ofn_80:
    - |
      listen 80;
      listen [::]:80;
      server_name {{ domain }};

      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;
      #add_header Content-Security-Policy "default-src self" always;

      location '/.well-known/acme-challenge' {
        default_type "text/plain";
        root /etc/letsencrypt/webrootauth;
      }

      location / {
        return 301 https://$server_name$request_uri;
      }

  ofn_443:
    - |
      listen 443 ssl;
      listen [::]:443 ssl;
      server_name {{ domain }};
      root {{ app_root }}/public;

      ssl_certificate      /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
      ssl_certificate_key  /etc/letsencrypt/live/{{ domain }}/privkey.pem;

      add_header X-Content-Type-Options nosniff always;
      add_header X-Xss-Protection "1; mode=block" always;
      #add_header Content-Security-Policy "default-src self" always;
      add_header Strict-Transport-Security "max-age=31536000" always;

      gzip on;
      gzip_disable "msie6";

      try_files $uri/index.html $uri @unicorn;
      location @unicorn {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_pass http://unicorn;
      }

      location ~ ^/(assets)/ {
        gzip_static on;
        expires max;
        add_header Cache-Control public;
        #add_header Last-Modified "";
        #add_header ETag "";
      }

      error_page 500 502 503 504 /500.html;
      client_max_body_size 4G;
      keepalive_timeout 60;

      include /etc/nginx/sites-available/ofn/*;

nginx_events_params:
  - worker_connections 768

nginx_configs:
  upstream:
    - upstream unicorn { server unix:{{ unicorn_sock }} fail_timeout=0; }

# letsencrypt_server: https://acme-staging.api.letsencrypt.org/directory
